#ifndef _REGSTRUCT_H_
#define _REGSTRUCT_H_

typedef volatile unsigned char REG8;
typedef volatile unsigned short REG16;
typedef volatile unsigned int REG32;

/* Memory controller (see manual chapter 5) */
struct memctl {
	REG32	BWSCON;
	REG32	BANKCON[8];
	REG32	REFRESH;
	REG32	BANKSIZE;
	REG32	MRSRB6;
	REG32	MRSRB7;
};

/* USB HOST (see manual chapter 12) */
struct usb_host {
	REG32	HcRevision;
	REG32	HcControl;
	REG32	HcCommonStatus;
	REG32	HcInterruptStatus;
	REG32	HcInterruptEnable;
	REG32	HcInterruptDisable;
	REG32	HcHCCA;
	REG32	HcPeriodCuttendED;
	REG32	HcControlHeadED;
	REG32	HcControlCurrentED;
	REG32	HcBulkHeadED;
	REG32	HcBuldCurrentED;
	REG32	HcDoneHead;
	REG32	HcRmInterval;
	REG32	HcFmRemaining;
	REG32	HcFmNumber;
	REG32	HcPeriodicStart;
	REG32	HcLSThreshold;
	REG32	HcRhDescriptorA;
	REG32	HcRhDescriptorB;
	REG32	HcRhStatus;
	REG32	HcRhPortStatus1;
	REG32	HcRhPortStatus2;
};


/* INTERRUPT (see manual chapter 14) */
struct interrupt {
	REG32	SRCPND;
	REG32	INTMOD;
	REG32	INTMSK;
	REG32	PRIORITY;
	REG32	INTPND;
	REG32	INTOFFSET;
	REG32	SUBSRCPND;
	REG32	INTSUBMSK;
};


/* DMAS (see manual chapter 8) */
struct dma {
	REG32	DISRC;
	REG32	DISRCC;
	REG32	DIDST;
	REG32	DIDSTC;
	REG32	DCON;
	REG32	DSTAT;
	REG32	DCSRC;
	REG32	DCDST;
	REG32	DMASKTRIG;
	REG32	res[7];
};

struct dmas {
	struct dma	dma[4];
};


/* CLOCK & POWER MANAGEMENT (see manual chapter 7) */
struct clock_power {
	REG32	LOCKTIME;
	REG32	MPLLCON;
	REG32	UPLLCON;
	REG32	CLKCON;
	REG32	CLKSLOW;
	REG32	CLKDIVN;
	REG32 	CAMDIVN;
};


/* LCD CONTROLLER (see manual chapter 15) */
struct lcd {
	REG32	LCDCON1;
	REG32	LCDCON2;
	REG32	LCDCON3;
	REG32	LCDCON4;
	REG32	LCDCON5;
	REG32	LCDSADDR1;
	REG32	LCDSADDR2;
	REG32	LCDSADDR3;
	REG32	REDLUT;
	REG32	GREENLUT;
	REG32	BLUELUT;
	REG32	res[8];
	REG32	DITHMODE;
	REG32	TPAL;
	REG32	LCDINTPND;
	REG32	LCDSRCPND;
	REG32	LCDINTMSK;
	REG32	LPCSEL;
};


/* NAND FLASH (see manual chapter 6) */
struct nand {
	REG32 	NFCONF;
	REG32 	NFCONT;
	REG32 	NFCMD;
	REG32 	NFADDR;
	REG32 	NFDATA;
	REG32	NFMECCD0;
	REG32	NFMECCD1;
	REG32	NFSECCD;
	REG32	NFSTAT;
	REG32	NFESTAT0;
	REG32	NFESTAT1;
	REG32	NFMECC0;
	REG32	NFMECC1;
	REG32	NFSECC;
	REG32	NFSBLK;
	REG32	NFEBLK;
};

/* UART (see manual chapter 11) */
struct uart {
	REG32	ULCON;
	REG32	UCON;
	REG32	UFCON;
	REG32	UMCON;
	REG32	UTRSTAT;
	REG32	UERSTAT;
	REG32	UFSTAT;
	REG32	UMSTAT;
	REG8	UTXH;
	REG8	res1[3];
	REG8	URXH;
	REG8	res2[3];
	REG32	UBRDIV;
};


/* PWM TIMER (see manual chapter 10) */
struct timer {
	REG32	TCNTB;
	REG32	TCMPB;
	REG32	TCNTO;
};

struct timers {
	REG32		TCFG0;
	REG32		TCFG1;
	REG32		TCON;
	struct timer	ch[4];
	REG32		TCNTB4;
	REG32		TCNTO4;
};


/* USB DEVICE (see manual chapter 13) */
struct usb_dev_fifos {
	REG8	EP_FIFO_REG;
	REG8	res[3];
};

struct usb_dev_dmas {
	REG8	EP_DMA_CON;
	REG8	res1[3];
	REG8	EP_DMA_UNIT;
	REG8	res2[3];
	REG8	EP_DMA_FIFO;
	REG8	res3[3];
	REG8	EP_DMA_TTC_L;
	REG8	res4[3];
	REG8	EP_DMA_TTC_M;
	REG8	res5[3];
	REG8	EP_DMA_TTC_H;
	REG8	res6[3];
};

struct usb_device {
	REG8	FUNC_ADDR_REG;
	REG8	res1[3];
	REG8	PWR_REG;
	REG8	res2[3];
	REG8	EP_INT_REG;
	REG8	res3[15];
	REG8	USB_INT_REG;
	REG8	res4[3];
	REG8	EP_INT_EN_REG;
	REG8	res5[15];
	REG8	USB_INT_EN_REG;
	REG8	res6[3];
	REG8	FRAME_NUM1_REG;
	REG8	res7[3];
	REG8	FRAME_NUM2_REG;
	REG8	res8[3];
	REG8	INDEX_REG;
	REG8	res9[7];
	REG8	MAXP_REG;
	REG8	res10[7];
	REG8	EP0_CSR_IN_CSR1_REG;
	REG8	res11[3];
	REG8	IN_CSR2_REG;
	REG8	res12[3];
	REG8	OUT_CSR1_REG;
	REG8	res13[7];
	REG8	OUT_CSR2_REG;
	REG8	res14[3];
	REG8	OUT_FIFO_CNT1_REG;
	REG8	res15[3];
	REG8	OUT_FIFO_CNT2_REG;
	REG8	res16[3];
	struct usb_dev_fifos	fifo[5];
	struct usb_dev_dmas	dma[5];
};


/* WATCH DOG TIMER (see manual chapter 18) */
struct watchdog {
	REG32	WTCON;
	REG32	WTDAT;
	REG32	WTCNT;
};


/* IIC (see manual chapter 20) */
struct i2c {
	REG32	IICCON;
	REG32	IICSTAT;
	REG32	IICADD;
	REG32	IICDS;
};


/* IIS (see manual chapter 21) */
struct i2s {
	REG16	IISCON;
	REG16	res1;
	REG16	IISMOD;
	REG16	res2;
	REG16	IISPSR;
	REG16	res3;
	REG16	IISFCON;
	REG16	res4;
	REG16	IISFIFO;
	REG16	res5;
};


/* I/O PORT (see manual chapter 9) */
struct gpio {
	REG32	GPACON;
	REG32	GPADAT;
	REG32	res1[2];
	REG32	GPBCON;
	REG32	GPBDAT;
	REG32	GPBUP;
	REG32	res2;
	REG32	GPCCON;
	REG32	GPCDAT;
	REG32	GPCUP;
	REG32	res3;
	REG32	GPDCON;
	REG32	GPDDAT;
	REG32	GPDUP;
	REG32	res4;
	REG32	GPECON;
	REG32	GPEDAT;
	REG32	GPEUP;
	REG32	res5;
	REG32	GPFCON;
	REG32	GPFDAT;
	REG32	GPFUP;
	REG32	res6;
	REG32	GPGCON;
	REG32	GPGDAT;
	REG32	GPGUP;
	REG32	res7;
	REG32	GPHCON;
	REG32	GPHDAT;
	REG32	GPHUP;
	REG32	res8;
	REG32	MISCCR;
	REG32	DCLKCON;
	
	REG32	EXTINT0;
	REG32	EXTINT1;
	REG32	EXTINT2;
	
	REG32	EINTFLT0;
	REG32	EINTFLT1;
	REG32	EINTFLT2;
	REG32	EINTFLT3;
	
	REG32	EINTMASK;
	
	REG32	EINTPEND;
	
	REG32	GSTATUS0;
	REG32	GSTATUS1;
	REG32	GSTATUS2;
	REG32	GSTATUS3;
	REG32	GSTATUS4;
	REG32	res9[3];
	REG32	MSLCON;
	REG32	GPJCON;
	REG32	GPJDAT;
	REG32	GPJUP;
};


/* RTC (see manual chapter 17) */
struct rtc {
	REG8	res0[64];
	REG8	RTCCON;
	REG8	res1[3];
	REG8	TICNT;
	REG8	res2[11];
	REG8	RTCALM;
	REG8	res3[3];
	REG8	ALMSEC;
	REG8	res4[3];
	REG8	ALMMIN;
	REG8	res5[3];
	REG8	ALMHOUR;
	REG8	res6[3];
	REG8	ALMDATE;
	REG8	res7[3];
	REG8	ALMMON;
	REG8	res8[3];
	REG8	ALMYEAR;
	REG8	res9[3];
	REG8	RTCRST;
	REG8	res10[3];
	REG8	BCDSEC;
	REG8	res11[3];
	REG8	BCDMIN;
	REG8	res12[3];
	REG8	BCDHOUR;
	REG8	res13[3];
	REG8	BCDDATE;
	REG8	res14[3];
	REG8	BCDDAY;
	REG8	res15[3];
	REG8	BCDMON;
	REG8	res16[3];
	REG8	BCDYEAR;
	REG8	res17[3];
};


/* ADC (see manual chapter 16) */
struct adc {
	REG32	ADCCON;
	REG32	ADCTSC;
	REG32	ADCDLY;
	REG32	ADCDAT0;
	REG32	ADCDAT1;
	REG32	ADCUPDN;
};


/* SPI (see manual chapter 22) */
struct spi_channel {
	REG8	SPCON;
	REG8	res1[3];
	REG8	SPSTA;
	REG8	res2[3];
	REG8	SPPIN;
	REG8	res3[3];
	REG8	SPPRE;
	REG8	res4[3];
	REG8	SPTDAT;
	REG8	res5[3];
	REG8	SPRDAT;
	REG8	res6[3];
	REG8	res7[16];
};

struct spi {
	struct spi_channel	ch[SPI_CHANNELS];
};


/* MMC INTERFACE (see S3C2400 manual chapter 19) */
struct s3c2400_mmc {
	REG8	MMCON;
	REG8	res1[3];
	REG8	MMCRR;
	REG8	res2[3];
	REG8	MMFCON;
	REG8	res3[3];
	REG8	MMSTA;
	REG8	res4[3];
	REG16	MMFSTA;
	REG16	res5;
	REG8	MMPRE;
	REG8	res6[3];
	REG16	MMLEN;
	REG16	res7;
	REG8	MMCR7;
	REG8	res8[3];
	REG32	MMRSP[4];
	REG8	MMCMD0;
	REG8	res9[3];
	REG32	MMCMD1;
	REG16	MMCR16;
	REG16	res10;
	REG8	MMDAT;
	REG8	res11[3];
};


/* SD INTERFACE (see manual chapter 19) */
struct sdi {
	REG32	SDICON;
	REG32	SDIPRE;
	REG32	SDICARG;
	REG32	SDICCON;
	REG32	SDICSTA;
	REG32	SDIRSP0;
	REG32	SDIRSP1;
	REG32	SDIRSP2;
	REG32	SDIRSP3;
	REG32	SDIDTIMER;
	REG32	SDIBSIZE;
	REG32	SDIDCON;
	REG32	SDIDCNT;
	REG32	SDIDSTA;
	REG32	SDIFSTA;
	REG8	SDIDAT;
	REG8	res[3];
	REG32	SDIIMSK;
};

#endif
