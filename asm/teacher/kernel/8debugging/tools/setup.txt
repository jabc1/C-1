1. 配置
cd /gdb-7.1
./configure --target=arm-linux --prefix=/opt/gdb --program-prefix=arm-linux-


2. 编译arm-linux-gdb for x86
make && make install


3. 编译gdbserver for arm
cd gdb/gdbserver
./configure --target=arm-linux --host=arm-linux

--------- fix bug ----------
	
	vim config.h

       把 conifg.h 文件中的#define HAVE_SYS_REG_H 1 注释掉
       就 OK 了.

----------------------------

make CC=arm-linux-gcc

cp gdbserver /nfs_rootfs/nfsroot-29/kernel_class/debug/

4. src
	---------------------
	#include <stdio.h>
	int main(void)
	{
		int i;
		i = 0;
		printf("%d\n",i);
		i++;

		printf("%d\n",i);
		i++;

		printf("%d\n",i);
		i++;

		*(int *)0 = 0;

		printf("%d\n",i);
		i++;

		return 0;

	}
	---------------------

	#arm-linux-gcc -g -o test test.c


5. 使用
[minicom]
#./gdbserver 192.168.0.3:2345 test
ip - pc电脑192.168.0.3

[pc]
#/opt/gdb/bin/arm-linux-gdb test
(gdb) target remote 192.168.0.7:2345
ip - 开发板192.168.0.7

(gdb) l		//查看代码
(gdb) b 8	//设置断点
(gdb) c		//continue run
(gdb) c		
(gdb) quit



